import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { toast } from "react-hot-toast";
import { Rating } from "@smastrom/react-rating";
import "@smastrom/react-rating/style.css";
import jwt from "jsonwebtoken";
import { FilterEnum } from "@/functions/filter";
import { useEffect, useState } from "react";
import prisma from "@/functions/prisma";
import { getMovie } from "@/functions/request";
import { createCommentAndRate } from "@/functions/api.request";
import { useRouter } from "next/router";
import { RoleEnum } from "@/functions/role.enum";
import { type NextPage } from "next";
import movie from "../api/movie";
import { comment } from "postcss";

const Movies: NextPage = ({ user, comments, commentList }: any) => {
    const [rating, setRating] = useState<number>();
    const [comment, setComment] = useState<string>("");
    const [movieData, setMovieData] = useState(null); 
    const [actorList, setActorList] = useState([]);
    const [discoverMovie, setDiscoverMovie] = useState([]);

    console.log(user);
    const router = useRouter();
    const { account } = router.query;
    
    interface movie {
      poster_path? : String;
      adult? : boolean;
      overview? : String;
      release_date? : String;
      id? : number;
      vote_average? : number;
      title? : String;
      popularity? : number;
      genre_ids? : number[];
    }

  const [topMovie, setData] = useState<movie[]>([]);

    useEffect(() => {
      getMovie("/discover/movie/")
      .then((res) => (
        setDiscoverMovie(res.results)
      ))

      getMovie("/movie/" + account)
      .then((res) =>(
        setMovieData(res)
      ))
      .catch(console.log);

      getMovie("/discover/movie/")
      .then((res) =>(
        setData(res.results)
      ))
    }, []);

    function onChangeComment(e) {
      setComment(e.target.value);
    }

    function onChangeRate(value) {
      setRating(value);
    }

    async function onSubmit(e) {
      e.preventDefault();

      const toastId = toast.loading("loading...");
      try {
        const response = await createCommentAndRate({ authorId: user.id, movieId: String(account), content: comment, rate: Number(rating) });
          toast.success("Thank you !.", {
            id: toastId,
          });
          router.reload()
      } catch (e) {
        toast.error("An error occur.", {
          id: toastId,
        });
      }
    }
    
    if(!movieData) {
      return <div className='w-full h-screen flex items-center justify-center'>
        <p className='text-center'>Loading...</p>
      </div>
    }

    return (
      <>
        <Head>
          <title>Rotten tomateoes</title>
          <meta name="description" content="Generated by Nextjs"/>
          <link rel="icon" href="/favicon.ico"/>
        </Head>
        <main className="min-h-screen bg-gray-800">
          <div className="h-[60vh] w-full bg-white">
            <div className="mx-auto h-full max-w-4xl">
              <nav className="flex items-center justify-between py-3">
                <Link href="/">
                <h4 className=" text-xl font-bold text-red-500">RT</h4>
                </Link>
                <div className="flex items-center space-x-2 space-x-2min-h-screen text-sm text-gray-700">
                  <Link href="/us">ABOUT US</Link>
                  { user ? (
                    <Link href="/login">LOGOUT</Link>
                  ) : (
                    <Link href="/register">REGISTER</Link>
                  )}
                </div>
              </nav>


              {/* Hero Section */}
              <div className="flex gap-x-10 lg:mt-20">
                <div className="relative h-80 w-60 flex-none rounded-lg">
                  <Image
                    className="rounded-xl"
                    alt="Movie image"
                    src={
                    "https://image.tmdb.org/t/p/w500/"
                    + movieData.poster_path
                    }
                    fill
                  />
                </div>
                <div className="space-y-4">
                  <p className="text-xs">{movieData.release_date}</p>
                  <h4 className="text-5xl font-bold">{movieData.title}</h4>
                  <small>Action</small>
                  <p className="w-96 text-xs text-gray-800">
                    {movieData.overview}
                  </p>
                  <Favorite></Favorite>
                </div>
              </div>
              { user ? (
              <main>
              <form onSubmit={onSubmit} className="mt-12">
                <div className="flex items-center justify-between">
                  <h4 className="mb-4 border-l-4 border-red-700 pl-1 font-semibold uppercase text-gray-200">
                    RATE AND REVIEW
                  </h4>
                  <Rating
                    style={{ maxWidth: 100 }}
                    value={rating}
                    onChange={onChangeRate}
                  />
                </div>
                <textarea
                  onChange={onChangeComment}
                  name="Comment..."
                  id=""
                  value={comment}
                  cols={20}
                  rows={5}
                  className="w-full appearance-none rounded-xl bg-gray-500 p-1  text-gray-100 outline-none focus-within:ring-gray-900 focus-within:ring-offset-1 focus-within:ring-offset-transparent focus:ring-4"
                ></textarea>
                <div className="flex justify-end">
                  <button className="ml mt-4 rounded-lg bg-red-800 px-3 py-1.5 font-semibold text-red-100">
                    Commenter
                  </button>
                </div>
              </form>
              </main>
              ) : (<div className="flex items-center justify-between">
                  <h4 className="mb-4 border-l-4 border-red-700 pl-1 font-semibold uppercase text-gray-200">
                    RATE AND REVIEW
                  </h4>
                  <p className="h-[10vh] mb-4 pl-1 font-semibold uppercase text-gray-200">Subscribe to comment and rate !</p>
              </div>
              )}
            </div>
          </div>
          
          <section className="mx-auto mt-60 h-full w-full max-w-4xl py-20">
          <div className='mt-8 text-gray-100 space-y-4'>
            {commentList.map((comment) => (
              <div>
                <div className='flex items-center justify-between'>
                  {/* <p>{comment.author.name}</p> */}
                  <Rating
                    style={{ maxWidth: 80 }}
                    value={4}
                    />
                </div>
                <p>{comment.content}</p>
              </div>
             ))}
             {/* {commentList.map((comment) => (

             ))} */}
          </div>
          </section>
          <footer>
            <p className="py-4 text-center text-sm font-semibold uppercase text-gray-300">
              By Survivors
            </p>
          </footer>
        </main>
      </>
    );
};  

export default Movies;

function MovieList({ image, title, rating, duration, genre, id}) {
  return (
    <div className="text-sm font-semibold text-gray-100">
      <div className="relative py-50 h-72 w-full flex-none rounded-lg">
        <Image
          className="rounded-xl"
          alt="Movie image"
          src={"https://image.tmdb.org/t/p/w500/" + image}
          fill
        />
      </div>
      <div className="mt-2 space-y-1">
        <p>{title}</p>
        <div className="mt-2 space-y-1">
          <p>120 min | ACTION</p>
          <small>Vote: {rating*10}%</small>
        </div>
      </div>
    </div>
  );
}

function Favorite({ index }: any) {

  const [state, add] = useState(true);

  let icon: number = 1, y = 0;
  const adding = (index) => {
    add(!state);
  };
  return (
    <div className="text-sm font-semibold text-gray-100">
      <button onClick={adding} className="text-l">❤{state ? "️Add to Favorite": "️Remove from favorite"}</button>
    </div>
  );
}

export const validateToken = (token: string) => {
  const user = jwt.verify(token, "hello");
  return user;
};

export const getServerSideProps = async ({ query, req }) => {
  let user;
  let authUser;

  const commentList = await prisma.comment.findMany({
    where: {
      movieId: query.movieId,
    },
    select: {
      id: true,
      content: true,
      authorId: true,
//      rate: true,
    },
  })

  try {

    user = validateToken(req.cookies.ACCESS_TOKEN);
    authUser = await prisma.user.findUnique({
      where: {
        id: user.id,
      },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
      },
    });
    console.log({ authUser });
  } catch (e) {
    user = null;
    authUser = null;
  }

  return {
    props: { user, authUser, commentList },
  };
};