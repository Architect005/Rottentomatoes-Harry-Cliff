import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { getMovie } from "@/functions/request";
import { FilterEnum } from "@/functions/filter";
import { type NextPage } from "next";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import prisma from "@/functions/prisma";
import { RoleEnum } from "@/functions/role.enum";
import { Identifier } from "typescript";
import { Session } from "inspector";

const Home: NextPage = ({ user }) => {

  interface movie {
    poster_path? : String;
    adult? : boolean;
    overview? : String;
    release_date? : String;
    id? : number;
    vote_average? : number;
    title? : String;
    popularity? : number;
    genre_ids? : number[];
  }

  const [topratedMovie, setTopratedMovie] = useState<movie[]>([]);
  const [discoverMovie, setDiscoverMovie] = useState([]);

  useEffect(() => {
    getMovie("/discover/movie")
    .then((res) => (
      setDiscoverMovie(res.results)
    ))

    getMovie("/movie/top_rated")
    .then((res) => {
      setTopratedMovie(res.results);
      console.log(res.results);
    })
  }, []);

  function disconnect() {
    return(
      !user
    );
  };

  if(!topratedMovie[0]) {
    return <div className='w-full h-screen flex items-center justify-center'>
      <p className='text-center'>Loading...</p>
    </div>
  }

  return (
    <>
      <Head>
        <title>Rotten tomateoes</title>
        <meta name="description" content="Generated by Nextjs"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main className="min-h-screen bg-gray-800">
        <div className="h-[58vh] w-full bg-white">
          <div className="mx-auto h-full max-w-4xl">
            <nav className="flex items-center justify-between py-3">
              <Link href="/">
              <h4 className=" text-xl font-bold text-red-500"> RT</h4>
              </Link>
              <div className="flex items-center space-x-4 space-x-2min-h-screen text-sm text-gray-700">
                <Link href="/us">ABOUT US</Link>
                {user ? (
                  <div>
                  <button onClick={disconnect}>
                  <Link href="/login">LOG OUT</Link>
                  </button>
                  <Link href="/credentials">CREDENTIALS</Link>
                  </div>
                  ) : (
                  <Link href="/register">LOG IN/REGISTER</Link>
                )}
              </div>
            </nav>

            {/* Hero Section */}
            <div className="flex gap-x-5 lg:mt-20 left-0">
              <div className="flex">
              <SlideMenu></SlideMenu>
              <Filter></Filter>
              </div>

              <div className="relative h-80 w-60 flex-none rounded-lg">
                <div></div>
                <Image
                  className="rounded-xl"
                  alt="Movie image"
                  src={
                    "https://image.tmdb.org/t/p/w500/" + 
                    topratedMovie[0].poster_path
                  }
                  fill
                  />
              </div>
              <div className="space-y-4">
                <p className="text-xs">{topratedMovie[0].release_date}</p>
                <h4 className="text-5xl font-bold">{topratedMovie[0].title}</h4>
                <small>Action</small>
                <p className="w-96 text-xs text-gray-800">
                  {topratedMovie[0].overview}
                </p>
                <small>Vote: {topratedMovie[0].vote_average*10}%</small>
                <Favorite></Favorite>
              </div>
            </div>
          </div>
        </div>

        <section className="mx-auto mt-56 h-full w-full max-w-4xl py-10">
          <div className="grid h-full grid-cols-4 gap-x-4 gap-y-8">
            {discoverMovie
              .map((movie, index) => (
                <div>
                <Link href={"/movie/" + movie.id}>
                  <MovieList rating={movie.vote_average} title={movie.title} image={movie.poster_path} genre={movie.genres} duration={movie.runtime}/>
                </Link>
                <Favorite index={discoverMovie}></Favorite>
                </div>
              ))}
              
          </div>
        </section>
        <footer>
          <p className="py-4 text-center text-sm font-semibold uppercase text-gray-300">
            By Survivors
          </p>
        </footer>
      </main>
    </>
  );
};

export default Home;

function Favorite({ index }: any) {

  const [state, add] = useState(true);

  let icon: number = 1, y = 0;
  const adding = (index) => {
    add(!state);
  };
  return (
    <div className="text-sm font-semibold text-gray-100">
      <button onClick={adding} className="text-l">❤{state ? "️Add to Favorite": "️Remove from favorite"}</button>
    </div>
  );
}

function SlideMenu ( index ) {
  interface movie {
    poster_path? : String;
    adult? : boolean;
    overview? : String;
    release_date? : String;
    id? : number;
    vote_average? : number;
    title? : String;
    popularity? : number;
    genre_ids? : number[];
  }

  const [topratedMovie, setDiscoverMovie] = useState<movie[]>([]);
  
  useEffect(() => {
    getMovie("/discover/movie")
    .then((res) => (
      setDiscoverMovie(res.results)
    ))
  }, []);

  var sideMenu = document.getElementById('side-menu');
  const openMenu = async () => {
      sideMenu.classList.remove('left-[-250px]');
      sideMenu.classList.add('left-0');
  };
  const closeMenu = () => {
      sideMenu.classList.remove('left-0');
      sideMenu.classList.add('left-[-250px]');
  };


  if(!topratedMovie[0]) {
    return <div className='w-full h-screen flex items-center justify-center'>
      <p className='text-center'>Loading...</p>
    </div>
  }

  return (
  <body>
    <div id="side-menu" className="fixed top-0 left-[-250px] w-[240px] h-screen z-50 bg-gray-700 p-5
    flex flex-col space-y-5 text-white duration-300">
        <a href="javascript:void(0)" className="text-right text-4xl" onClick={closeMenu}>&times;</a>
        <section>
        <Image
          className="rounded"
          height={80}
          width={80}
          alt="Movie image"
          src={
            "https://image.tmdb.org/t/p/w500/" + 
            topratedMovie[0].poster_path
          }
        />
        <a className="text-xs">{topratedMovie[0].title}</a>
        </section>
    </div>

    <main className="p-0 space-x-5">
        <span className="cursor-pointer text-xl" onClick={openMenu}>&#9776;My favorites</span>
    </main>
  </body>
  );
}

function Filter() {
  return (
    <form>
      <button className="rounded-lg w-20 bg-red-800 px-3 py-1 font-semibold text-red-100 text-xs">
        SEARCH BY
      </button>
      <select
        //value={}
        //onChange={}
        className=" mb-6 px-5 w-20 h-15 appearance-none rounded-md bg-gray-200 text-gray-700 outline-none focus-within:ring-gray-700 focus:ring-2"
      >
        <option value={FilterEnum.Date}>Date</option>
        <option value={FilterEnum.Genre}>Action</option>
        <option value={FilterEnum.Genre}>Comedy</option>
        <option value={FilterEnum.Genre}>Horror</option>
        <option value={FilterEnum.Director}>Director</option>
      </select>
    </form>
  );
}

function MovieList({ image, title, rating, duration, genre}) {
  return (
    <div className="text-sm font-semibold text-gray-100">
      <div className="relative h-72 w-full flex-none rounded-lg">
        <Image
          className="rounded-xl"
          alt="Movie image"
          src={"https://image.tmdb.org/t/p/w500/" + image}
          fill
        />
      </div>
      <div className="mt-2 space-y-1">
        <p>{title}</p>
        <div className="mt-2 space-y-1">
          <p>120 min | ACTION</p>
          <small>Vote: {rating*10}%</small>
        </div>
      </div>
    </div>
  );
}

export const getServerSideProps = async ({ query, req }) => {
  let user;
  let authUser;
  try {
    user = validateToken(req.cookies.ACCESS_TOKEN);
    authUser = await prisma.user.findUnique({
      where: {
        id: user.id,
      },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
      },
    });
    if(authUser.role != RoleEnum.User) {
      return {
        redirect: {
          permanent: false,
          destination: "/401",
        },
      };
    }
    console.log({ authUser });
  } catch (e) {
    user = null;
    authUser = null;
  }

  return {
    props: { user, authUser },
  };
};