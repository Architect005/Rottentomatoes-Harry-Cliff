generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Account {
    id                String @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id                String @id @default(cuid())
    sessionToken      String @unique
    userId            String
    expire            DateTime
    user              User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String @id @default(cuid())
    name              String
    email             String @unique
    password          String
    role              String @default("user")
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    comments          Comment[]
    favorite          Favorite[]
    grade             Grade[]
}

model Movie {
    id                String @id @default(cuid())
    title             String
    image             String
}

model Comment {
    id                String @id @default(cuid())
    authorId          String
    content           String
    movieId           Int
    author            User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Grade {
    id                String @id @default(cuid())
    movieId           Int
    authorId          String
    grade             Int
    author            User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Favorite {
    id                String @id @default(cuid())
    authorId          String
    movieId           Int
    author            User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier        String
    token             String @unique
    expires           DateTime

    @@unique([identifier, token])
}